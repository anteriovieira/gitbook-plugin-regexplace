{
  "name": "gitbook-plugin-regexplace",
  "version": "2.1.0",
  "description": "Replace (RegExp -style) page section texts with given substitutes on GitBook projects",
  "scripts": {
    "test": "echo \"Error: no tests specified\" && exit 1"
  },
  "keywords": [
    "GitBook",
    "PDF",
    "print"
  ],
  "author": {
    "name": "Marko Manninen 'markom'",
    "email": "mmstud@gmail.com"
  },
  "license": "MIT",
  "engines": {
    "gitbook": "*"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/markomanninen/gitbook-plugin-regexplace.git"
  },
  "bugs": {
    "url": "https://github.com/markomanninen/gitbook-plugin-regexplace/issues"
  },
  "homepage": "https://github.com/markomanninen/gitbook-plugin-regexplace#readme",
  "gitHead": "2bbdc484c228720e925a93d5a300a64c416ad3e6",
  "_id": "gitbook-plugin-regexplace@1.0.6",
  "_shasum": "a40a2bf007b7238718cc19a23cb7daff5d12bbd4",
  "_from": "gitbook-plugin-regexplace@1.0.6",
  "_npmVersion": "1.4.28",
  "_nodeVersion": "v0.10.33",
  "_npmUser": {
    "name": "markom",
    "email": "mmstud@gmail.com"
  },
  "maintainers": [
    {
      "name": "markom",
      "email": "mmstud@gmail.com"
    }
  ],
  "dependencies": {
    "q": "^1.4.1"
  },
  "dist": {
    "shasum": "a40a2bf007b7238718cc19a23cb7daff5d12bbd4",
    "tarball": "http://registry.npmjs.org/gitbook-plugin-regexplace/-/gitbook-plugin-regexplace-1.0.6.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/gitbook-plugin-regexplace/-/gitbook-plugin-regexplace-1.0.6.tgz",
  "readme": "gitbook-plugin-regexplace\n==========\nGeneral text replacement (RegExp -style) plugin for GitBook projects.\n\nInitial problems: \n\n- Using html code blocks directly on markdown pages often ruins rendering a GitBook page\n- Similar type of content manipulation requires multiple plugins\n- Indexing a book content\n\n```gitbook-plugin-regexplace``` is to resolve these problems with tech-savvy approach: using js regular expressions and replace functionality plus giving option to add mathes on book variables.\n\nRegExp guide: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n\nRexExr v2.0 builder: [http://regexr.com](http://regexr.com)\n\n\nUsage examples\n-----\n\n* Prevent page break on PDF/print\n* Adding a container for image\n* Counting and listing unique words on a book\n* Using citations/footnotes\n\n> If you have new helpful use cases that could benefit plugin users, please send me a note so I can add new examples on this readme file: https://github.com/markomanninen/gitbook-plugin-regexplace\n\n\nPrevent page break\n-----\n\nMark partitions on the page that should not break apart on printing the page or generating the page as a pdf.\n\nAdd the ```regexplace``` plugin on the plugins array of your ```book.json``` file and configure appropriate substitutes and texts to replace:\n\n```json\n{\n\t\"plugins\": [\"regexplace\"],\n\t\"pluginsConfig\": {\n\t\t\"regexplace\": {\n\t\t\t\"substitutes\": [\n\t\t\t\t{\"pattern\": \"<!-- nopb -->\", \"flags\": \"g\", \"substitute\": \"<div class=\\\"nopb\\\">\"},\n\t\t\t\t{\"pattern\": \"<!-- endnopb -->\", \"flags\": \"g\", \"substitute\": \"</div>\"}\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\nMark page partitions to text (markdown) files:\n\n```markdown\n<!-- nopb -->\n\n# Title\n\nNormal content...\n\n> additional text blocks\n\n<!-- endnopb -->\n```\n\nThis will produce:\n\n```html\n<div class=\"nopb\">\n<h1>Title</h1>\n<p>Normal content...</p>\n<quote>additional text blocks</quote>\n</div>\n```\n\nWhen above configuration is combined with the following website.css code block, it should prevent page breaks inside partitions, which are defined with div elements having a class ```nopb```:\n\n```css\ndiv.nopb {\n    page-break-inside: avoid;\t\n}\n```\n\nOf course this also requires setting some style definitions for website and pdf generation on ```book.json``` similar to:\n\n```json\n\"styles\": {\n    \"website\": \"media/website.css\",\n    \"pdf\": \"media/website.css\"\n}\n```\n\n\nAdding a container for image\n-----\n\nNext example is written with a help of RexExr v2.0 builder: [http://regexr.com/3caon](http://regexr.com/3caon) and inspired from the [image-caption](https://github.com/todvora/gitbook-plugin-image-captions) plugin of [@todvora](https://github.com/todvora).\n\n```json\n{\n\t\"plugins\": [\"regexplace\"],\n\t\"pluginsConfig\": {\n\t\t\"regexplace\": {\n\t\t\t\"substitutes\": [\n\t\t\t\t{\n                   \"pattern\": \"<img (.*)alt=\\\"([^\\\"]*)\\\"(.*) {0,1}\\/{0,1}> {0,}{caption([^\\\\}]*)}\", \n                   \"flags\": \"g\", \n                   \"substitute\": \"<figure id=\\\"fig_PAGE_LEVEL_._INDEX_\\\"><img $1alt=\\\"$2\\\" $4$3><figcaption><span>Picture _PAGE_LEVEL_._INDEX_: </span>$2</figcaption></figure>\"\n                }\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\nThis example also leverages ```_PAGE_LEVEL_``` and ```_INDEX_ ```templates which are replaced by page level information for ```_PAGE_LEVEL_``` and match index value for ```_INDEX_``` in the ```gitbook-plugin-regexplace``` plugin.\n\nLets assume ```page.md``` has a level 1 and there is content something like this:\n\n```markdown\n![Image 1](image.png){caption width=300}\n\n![Image 2](image2.png){caption}\n```\n\nBy using above regex substitutes it will produce output:\n\n```html\n<figure id=\"fig1.1\"><img scr=\"image.png\" alt=\"Image 1\" width=300><figcaption><span>Picture 1.1: </span>Image 1</figcaption></figure>\n\n<figure id=\"fig1.2\"><img scr=\"image2.png\" alt=\"Image 2\"><figcaption><span>Picture 1.2: </span>Image 2</figcaption></figure>\n```\n\nWhich in turn can be styled with ```website.css``` to get nice image caption and container:\n\n```css\nfigure {\n    margin: 1.5em 0px;\n    padding: 10px 0;\n    text-align: center;\n}\n\nfigcaption {\n    clear: left;\n    margin: 0.75em 0px;\n    text-align: center;\n    font-style: italic;\n    line-height: 1.5em;\n    font-size: 80%;\n    color: #666;\n}\n```\n\nScreenshot from my [GitBook project](https://markomanninen.gitbooks.io/artifacts-of-the-flower-of-life/content/cownose.html) shown below:\n\n![Image container](https://github.com/markomanninen/gitbook-plugin-regexplace/raw/master/image-container.png)\n\n\nCounting and listing unique words on book\n-----\n\nGood way to do spell checking and text analysis is to count words on document and list them on test page. This can be achieved by regular expressions as well. First define configuration on ```book.json```:\n\n```json\n{\n\t\"plugins\": [\"regexplace\"],\n\t\"pluginsConfig\": {\n\t\t\"regexplace\": {\n\t\t\t\"substitutes\": [\n\t\t\t\t{\n                    \"pattern\": \"((?!([^<]+)?>)([0-9A-Za-z\\\\u0080-\\\\u00FF'.-]?)+(?!([^{]+)?})([0-9A-Za-z\\\\u0080-\\\\u00FF'])?(?!([^&]+)?;)([0-9A-Za-z\\\\u0080-\\\\u00FF']))\",\n                    \"flags\": \"g\",\n                    \"substitute\": \"$1\",\n                    \"unreset\": true,\n                    \"store\": {\n                        \"substitute\": \"{$1}\",\n                        \"unique\": true,\n                        \"lower\": true,\n                        \"variable_name\": \"words\"\n                    }\n                }\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\nBy using _PAGE_PATH_ on store substitute we can get information on which page word is used, for example:\n\n```json\n\"substitute\": \"{_PAGE_PATH_#$1}\"\n```\n\nBut for now we just want to list all unique words in lower case and sorted alphabetically. Next step is to output words on any page you wish, say ```keywords.md```:\n\n\n```markdown\n# Words\n\nUnique words in the book: {{ book.words.length }}\n\n<hr/>\n\n{{ book.words.sort().join(', ') }}\n```\n\nThere you must be careful on printing words on the page, because they might also get counted on the final result. I have used output format ```{$1}``` for stored words and discounted them on pattern configuration: ```\"pattern\": \"... (?!([^{]+)?}) ...\"```. Also pattern ```\"substitute\": \"$1\"``` is important because you could easily replace all words on the book by this method. Here we recover match to the same position with ```$1```.\n\n\nUsing citations\n-----\n\nAgain a specific pattern must be included on plugin configuration on ```book.json``` file:\n\n```json\n{\n    \"pattern\": \"<!-- cite author=\\\"(.*?)\\\" title=\\\"(.*?)\\\" date=\\\"(.*?)\\\" location=\\\"(.*?)\\\" type=\\\"(.*?)\\\"(.*?) -->\",\n    \"flags\": \"g\",\n    \"substitute\": \"<sup><a id=\\\"cite_INDEX_\\\" href=\\\"references.html#ref_PAGE_LEVEL_._INDEX_\\\" title=\\\"$1: $2 $3\\\" type=\\\"$5\\\">_INDEX_</a></sup>\",\n    \"store\": {\n        \"substitute\": \"<span><a id=\\\"ref_PAGE_LEVEL_._INDEX_\\\" href=\\\"_PAGE_PATH_#cite_INDEX_\\\">_PAGE_LEVEL_._INDEX_.</a></span> <span>$1:</span> <span><a$6>$2</a></span> <span>$3</span> <span>$4</span>\",\n        \"variable_name\": \"citations\"\n    }\n}\n```\n\nThis will find next text blocks from markdown pages, for example ```reflections.md```:\n\n```markdown\n<!-- cite author=\"wikipedia.org\" title=\"Vesica Piscis\" date=\"\" location=\"\" type=\"website\" href=\"http://en.wikipedia.org/wiki/Vesica_piscis\" -->\n```\n\nand replace it with html block:\n\n```html\n<sup><a id=\"cite1\" href=\"references.html#ref1.1\" title=\"wikipedia.org: Vesica Piscis \" type=\"website\">1</a></sup>\n```\n\nwhich is a footnote link with autoincrement index per chapter.\n\nOn page for example ```references.md```, you can use this code snippet to list all citations used on a book:\n\n```markdown\n## Citations\n<ul>\n{% for cite in book.citations %}<li>{{ cite }}</li>{% endfor %}\n</ul>\n{% endif %}\n```\n\nWhich will yield html:\n\n```html\n<h2>Citations</h2>\n<ul>\n<li><span><a id=\"ref1.1\" href=\"reflections.html#cite1\">1.1.</a></span> <span>wikipedia.org:</span> <span><a href=\"http://en.wikipedia.org/wiki/Vesica_piscis\" target=\"_blank\">Vesica Piscis</a></span> <span></span> <span></span></li>\n</ul>\n```\n\nThe first link ```1.1.``` is a reference back to the citation place.\n\nIf you want to list citations as footnotes at the end of each page/chapter, you could do separate include file, for example footnotes.md with the following code:\n\n```markdown\n<ul>\n{% for cite in book.citations %}\n{% if cite.match(file.path) %}<li>{{ cite }}</li>{% endif %}\n{% endfor %}\n</ul>\n{% endif %}\n```\n\nThen you can add that file on every page you want to support footnotes, presumely at the end of the file:\n\n```markdown\n{% include 'footnotes.md' %}\n```\n\nOne more small visual thing is to add these declarations to a stylesheet file, ```website.css```:\n\n```css\nsup {\n    padding: 2px\n}\nul.citations {\n    margin-left: -30px;\n}\nul.citations li:nth-child(1) {\n    padding-top: 20px;\n    border-top: 1px solid #BBB;\n}\nul.citations li {\n    font-size: 80%;\n    list-style: outside none none;\n}\n```\n\nScreenshot of output:\n\n![Footnotes](https://github.com/markomanninen/gitbook-plugin-regexplace/raw/master/footnotes.png)\n\nWith ```gitbook-plugin-regexplace``` configuration patterns, substitutes, markdown templates and stylesheet you can manage a pretty detailed citation/footnote system on a GitBook project.\n",
  "readmeFilename": "README.md"
}
